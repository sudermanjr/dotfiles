alias kevents="kubectl get events --sort-by=.metadata.creationTimestamp"
alias kb="kustomize build"

alias kns=kubens
alias kx=kubectx

alias kgetns="kubectl config get-contexts | grep $(kubectl config current-context 2>/dev/null) | awk '{print \$5}' | tr -d '\n'"

alias kwatch="watch kubectl get ds,deploy,hpa,po,svc,ing,cm"
alias kwatchistio="watch kubectl get ds,deploy,po,svc,ing,cm,pvc,secret,cronjob,routerule"
alias kgetall="kubectl api-resources --verbs=list --namespaced -o name | xargs -L 1 -I {} kubectl get {} --show-kind --ignore-not-found"

kc() {
  kubectl -n "${namespace}" $@
}

generate_kubeconfig_from_sa() {
  namespace="$1"
  serviceaccount="$2"

  sa_secret_name=$(kc get serviceaccount "${serviceaccount}" -o 'jsonpath={.secrets[0].name}')

  context_name="$(kubectl config current-context)"
  kubeconfig_old="${KUBECONFIG}"
  cluster_name="$(kubectl config view -o "jsonpath={.contexts[?(@.name==\"${context_name}\")].context.cluster}")"
  server_name="$(kubectl config view -o "jsonpath={.clusters[?(@.name==\"${cluster_name}\")].cluster.server}")"
  cacert="$(kc get secret "${sa_secret_name}" -o "jsonpath={.data.ca\.crt}" | base64 --decode)"
  token="$(kc get secret "${sa_secret_name}" -o "jsonpath={.data.token}" | base64 --decode)"

  export KUBECONFIG="$(mktemp)"
  kubectl config set-credentials "${serviceaccount}" --token="${token}" >/dev/null
  ca_crt="$(mktemp)"; echo "${cacert}" > ${ca_crt}
  kubectl config set-cluster "${cluster_name}" --server="${server_name}" --certificate-authority="$ca_crt" --embed-certs >/dev/null
  kubectl config set-context "${cluster_name}" --cluster="${cluster_name}" --user="${serviceaccount}" >/dev/null
  kubectl config use-context "${cluster_name}" >/dev/null

  KUBECONFIG_DATA=$(cat "${KUBECONFIG}")
  rm ${KUBECONFIG}
  echo "${KUBECONFIG_DATA}"
  export KUBECONFIG="${kubeconfig_old}"
}

## Krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Kubesec
kubesec ()
{
    local FILE="${1:-}";
    [[ ! -f "${FILE}" ]] && {
        echo "kubesec: ${FILE}: No such file" >&2;
        return 1
    };
    curl --silent \
      --compressed \
      --connect-timeout 5 \
      -F file=@"${FILE}" \
      https://kubesec.io/
}

kdebug ()
{
  kubectl create ns sudermanjr-debug
  kubectl -n sudermanjr-debug apply -f ~/repos/sudermanjr/utilities/utility-deploy.yaml
}

kdebugclean ()
{
  kubectl delete ns sudermanjr-debug
}

castatus() {
  ca_ns=$(kubectl get cm -A --field-selector="metadata.name==cluster-autoscaler-status" --no-headers | awk '{print $1}')
  kubectl get cm cluster-autoscaler-status -ojsonpath='{.data.status}' -n $ca_ns
}

kroll() {
  deployment="$1"
  kubectl patch deployment ${deployment} -p \
    "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
}

nsroll() {
  namespace="$1"
  echo "Rolling all deployments in ns: $namespace"
  deployments=$(kubectl -n $namespace get deployments --no-headers -oname)
  for deploy in $deployments; do
    kubectl -n $namespace patch ${deploy} -p \
      "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
  done
}

alias kmetrics='kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes" | jq ".items[] | .metadata.name, .usage"'

linkerd-namespaces(){
  kubectl get ns -ojson | jq -r '.items[] | select(.metadata.annotations["linkerd.io/inject"] == "enabled") .metadata.name'
}

ktaints(){
  kubectl get nodes -o go-template='{{printf "%-50s %-12s\n" "Node" "Taint"}}{{- range .items}}{{- if $taint := (index .spec "taints") }}{{- .metadata.name }}{{ "\t" }}{{- range $taint }}{{- .key }}={{ .value }}:{{ .effect }}{{ "\t" }}{{- end }}{{- "\n" }}{{- end}}{{- end}}'
}

alias knodes='kubectl get nodes -L node.kubernetes.io/instance-type  -L karpenter.sh/provisioner-name -L topology.kubernetes.io/zone -L karpenter.sh/nodepool'

kubebench(){
  kubectl create ns kube-bench || true
  kubectl -n kube-bench delete job kube-bench || true
  kubectl -n kube-bench apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/master/job.yaml
  kubectl -n kube-bench get po -oname | xargs -L1 kubectl -n kube-bench logs
}

kforcedeletens(){
  kubectl get namespace "$1" -o json \
            | tr -d "\n" | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/" \
            | kubectl replace --raw /api/v1/namespaces/stucked-namespace/finalize -f -
}

kindmetrics(){
  helm upgrade --install metrics-server metrics-server/metrics-server -n metrics-server --create-namespace --set=args={'--kubelet-insecure-tls'}
}

alias lens='open /Applications/Lens.app'

SCRIPT_NAME=$(basename ${BASH_SOURCE[0]})
[ $DEBUG_BASHRC ] && echo "$SCRIPT_NAME start"

# set aliases

alias browse='fzf --preview="bat --color=always {}"' # ctrl+t does this, not sure it's needed

if type "batcat" > /dev/null 2>&1; then
  [ $DEBUG_BASHRC ] && echo "$SCRIPT_NAME found batcat, symlinking"
  ln -s "$(which batcat)" ~/bin/bat > /dev/null 2>&1
fi
alias cat='bat --paging=never'
alias ll='exa -l --git --no-permissions -h'

alias d=docker
complete -F _docker d

# https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion
alias watch='watch -xc '

#Disk space
alias du='du -kh'    # Makes a more readable output.
alias df='df -kTh'
alias ducks='du -cmxhs * --exclude=/home --exclude=/proc --exclude=/mnt | sort -h'

#Sudo stuff
if [ -x '/usr/bin/sudo' ];then
  alias sudo='sudo -E'
  alias sbash='sudo -E bash'
  export PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin
fi


alias clean=cleanup_commands

cleanup_commands() {
  echo "Cleaning up docker..."
  docker system prune -af

  echo "Cleaning homebrew..."
  brew cleanup

  echo "Cleaning up brew cask"
  brew cask cleanup

  echo "Cleaninup up AWS ENV"
  unset AWS_DEFAULT_REGION
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_REGION
  unset AWS_ACCESS_KEY_ID
  unset AWS_SESSION_TOKEN

}

# Get colors
get_colors() {
  for i in {0..255}; do
      printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
  done
}

# Git stuff
alias gitlog="git log --pretty='format:%H %G? %GS %GK %aN  %s' --reverse | tail; echo"
gitreleaselog() {
  CURRENT=$(git rev-parse HEAD)
  if [ -z "$1" ]; then
    LAST_TAG=$(git describe --tags --abbrev=0 ${CURRENT}^)
  else
    LAST_TAG=$1
  fi
  CHANGELOG=$(git log --pretty='format:%h %s' --reverse $LAST_TAG..HEAD)
  printf "\nChanges since $LAST_TAG:\n\n"
  echo "$CHANGELOG"
}

gitclean(){
  git fetch --prune origin
  git remote prune origin
}

precommitinit() {
  cp ~/.pre-commit-config.default.yaml $(git rev-parse --show-toplevel)/.pre-commit-config.yaml
  pre-commit install -f
}

# Flush DNS Cache on OSX
alias flushdns="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache"

# Gist the current dir
alias gist_dir='gist --skip-empty $(ls ./)'

# Get cert info
getCert() {
 echo | \
   openssl s_client -servername $1 -connect $1:$2 2>/dev/null | \
   openssl x509 -text
}

genload() {
  echo "Loading $TARGET"
  k6 run ~/load.js -d 60m --vus 10
}

alias ds_store_clean="find . -name '.DS_Store' -type f -delete"

random_word() {
  perl -e '$dict = "/usr/share/dict/words"; $bytes= -s $dict; open IN, $dict;seek(IN,rand($bytes-11),0);$_=<IN>;$_=<IN>;print'
}

alias tf=terraform

# Asciicast2gif
# https://github.com/asciinema/asciicast2gif
# Pass the ID of an asciinema link to it, and it will output a gif
asciicast2gif() {
  docker run --env DEBUG=1 --rm -v $(pwd):/data asciinema/asciicast2gif https://asciinema.org/a/$1.json /data/$1.gif
}

function grepfzf () {
  rg -S $1 | fzf
}

lowercase_filenames() {
  for i in *; do git mv $i `echo $i | tr [:upper:] [:lower:]` --force; done
}

# Get Yubikey MFA
mfa() {
  if command -v ykman &> /dev/null; then
    if [ -z "$1" ]; then
      ykman oath accounts code
    else
      ykman oath accounts code | grep -i $1
    fi
  fi
}

# Golicense https://github.com/mitchellh/golicense
alias golicense='golicense ~/.license.hcl'

alias swagger='docker run --rm -it  --user $(id -u):$(id -g) -e GOPATH=$(go env GOPATH):/go -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger'

triageparty() {
  if [ -d $HOME/.triage-party-cache ]; then mkdir $HOME/.triage-party-cache; fi
  docker run -it --rm -e GITHUB_TOKEN -v "$HOME/triage-party-config.yaml:/app/config/config.yaml" -p 8080:8080 -e PERSIST_PATH=/cache -v "$HOME/.triage-party-cache:/cache" quay.io/fairwinds/triage-party:9c9d800d13cf3743e677b9a2df04e89da07fb3f0
}

alias fsl=fossil

alias fixecr="aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws"

# ArgoCD
alias argocd="argocd --core"
alias argo_password="kubectl get secret -n fw-argocd argocd-initial-admin-secret -ojsonpath='{.data.password}' | base64 -d | pbcopy"
alias argo_ui="argo_password && kubectl port-forward -n fw-argocd svc/fw-argocd-server 8080:80"

alias ssh-add='ssh-add -t 6h'

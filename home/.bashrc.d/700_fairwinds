export CUDDLEFISH_HOME="$HOME/.cthulhu"
export CUDDLEFISH_VENV="$HOME/.cthulhu/cuddle"
export CUDDLEFISH_PREFER_SSH_GIT=true

if [ -d $CUDDLEFISH_HOME ]; then
  source /Users/asuderma/.cthulhu/config
  source $HOME/repos/github.com/fairwindsops/cuddlefish/workstation/bin/__cuddlectl_complete.bash

  alias ccenv=". ${CUDDLEFISH_VENV}/bin/activate"

  alias ugit="unset GIT_SSH_COMMAND"

  export BE_ANNOYING=true

  source <(cthulhucuddle completion-bash)
  export BASTION_USERNAME=sudermanjr

  function __refresh_aws() {
      if [ "${DOTFILES_LOGLEVEL}" = "debug" ]; then echo "DEBUG: enter __refresh_vault_aws"; fi
      if [ -n "${VAULT_AWS_ROLE}" ] && [ -n "${VAULT_AWS_ACCOUNT}" ]; then
          if [ "${DOTFILES_LOGLEVEL}" = "debug" ]; then echo "DEBUG: checking AWS_SESSION_START duration"; fi
          if [ -z "${AWS_SESSION_START}" ] || [ "$(date +%s)" -gt "$((AWS_SESSION_START + 3600))" ]; then
              if [ "${DOTFILES_LOGLEVEL}" = "debug" ]; then echo "DEBUG: refreshing AWS credentials"; fi
              if vault token lookup > /dev/null; then
                  if [ "${DOTFILES_LOGLEVEL}" = "debug" ]; then echo "DEBUG: valid vault token found"; fi
              else
                  vault login -method=oidc 1>/dev/null
              fi
              eval "$(cthulhucuddle vault refresh-aws)"
          fi
      else
          if [ "${DOTFILES_LOGLEVEL}" = "debug" ]; then echo "DEBUG: unsetting any aws variables since no role or account is set"; fi
          #if [ -n "$AWS_SESSION_VAULT_LEASE_ID" ]; then
          #    vault lease revoke $AWS_SESSION_VAULT_LEASE_ID > /dev/null
          #    unset AWS_SESSION_VAULT_LEASE_ID
          #fi
          #unset AWS_SESSION_START
          #unset AWS_ACCESS_KEY_ID
          #unset AWS_SECRET_ACCESS_KEY
          #unset AWS_SESSION_TOKEN
          #unset AWS_SECURITY_TOKEN
      fi
  }

  export PROMPT_COMMAND="__refresh_aws"
  switch_role () {
    export VAULT_AWS_ROLE=$1
    unset AWS_SESSION_START
  }
fi

insights_run () {
  for cj in $(kubectl -n insights-agent get cj --no-headers | awk '{print $1}'); do
    kubectl -n insights-agent delete job "$cj-manual"
    kubectl -n insights-agent create job "$cj-manual" --from=cj/$cj
  done
}

vars_to_envrc () {
  if [ -f "config/local/vars.yml" ]; then
    cat config/local/vars.yml | yq e - -o=json | jq -r 'to_entries|map("export \(.key)=\"\(.value|tostring)\"")|.[]' > .envrc
    echo "export KUBECONFIG=$(ls config/private/kubeconfig*)" >> .envrc
  else
    echo "No config/local/vars.yml found - are you in the inventory top directory?"
  fi
}
